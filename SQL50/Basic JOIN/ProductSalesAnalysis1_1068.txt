Table: Sales

+-------------+-------+
| Column Name | Type  |
+-------------+-------+
| sale_id     | int   |
| product_id  | int   |
| year        | int   |
| quantity    | int   |
| price       | int   |
+-------------+-------+
(sale_id, year) is the primary key (combination of columns with unique values) of this table.
product_id is a foreign key (reference column) to Product table.
Each row of this table shows a sale on the product product_id in a certain year.
Note that the price is per unit.
 

Table: Product

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| product_id   | int     |
| product_name | varchar |
+--------------+---------+
product_id is the primary key (column with unique values) of this table.
Each row of this table indicates the product name of each product.
 

Write a solution to report the product_name, year, and price for each sale_id in the Sales table.

=======================================================================================================================================================

# My Solution
SELECT p.product_name, s.year, s.price
FROM Sales s 
JOIN Product p
    USING (product_id)

# From Editorial pane
SELECT 
    DISTINCT p.product_name, s.year, s.price
FROM 
    Sales s
JOIN 
    Product p
ON
    s.product_id = p.product_id

# Most voted solution from solutions pane
# Likely what is happening is that in the Sales table there are multiple transactions of the same product_id, year, price at different quantity. 
# As a result, if DISTINCT entries were retrieved before joining with Product table, it runs a lot faster.
SELECT DISTINCT p.product_name, s.year, s.price
FROM   
    (SELECT DISTINCT product_id, year, price 
    FROM Sales) s
JOIN
    Product p
USING (product_id);