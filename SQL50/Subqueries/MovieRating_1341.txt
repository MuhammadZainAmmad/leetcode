Table: Movies

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id is the primary key (column with unique values) for this table.
title is the name of the movie.
 

Table: Users

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id is the primary key (column with unique values) for this table.
 

Table: MovieRating

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) is the primary key (column with unique values) for this table.
This table contains the rating of a movie by a user in their review.
created_at is the user's review date. 
 

Write a solution to:

Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name

===================================================================================================================================================

# MySol: Using subquery and Join
# (
#     SELECT t1.name AS results
#     FROM Users t1
#     JOIN (
#         SELECT user_id, COUNT(rating) As no_of_ratings
#         FROM MovieRating
#         GROUP BY user_id
#     ) t2
#     USING(user_id)
#     ORDER BY t2.no_of_ratings DESC, t1.name
#     LIMIT 1
# )
# UNION ALL
# (
#     SELECT t1.title AS results
#     FROM Movies t1
#     JOIN (
#         SELECT movie_id, AVG(rating) AS avg_rating
#         FROM MovieRating 
#         WHERE created_at LIKE '%2020-02%'
#         GROUP BY movie_id
#     ) t2
#     USING(movie_id)
#     ORDER BY t2.avg_rating DESC, t1.title
#     LIMIT 1
# )

# From solution (Efficient): Using first_value() and Join
SELECT 
    DISTINCT FIRST_VALUE(u.name) OVER(ORDER BY COUNT(r.movie_id) DESC, u.name ASC) AS results
FROM Users AS u 
JOIN MovieRating AS r
USING(user_id)
GROUP BY u.user_id
UNION ALL
SELECT 
    DISTINCT FIRST_VALUE(m.title) OVER(ORDER BY AVG(r.rating) DESC, m.title ASC) AS results
FROM Movies AS m 
JOIN MovieRating AS r
USING(movie_id)
WHERE r.created_at LIKE '%2020-02%'
GROUP BY m.movie_id